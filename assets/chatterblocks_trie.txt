class Chatterblocks extends CI_Controller
{

    public function index()
    {
        // Create the trie
        $eng_trie = new trie();

        // Load the word list
        $word_list = file('http://www.sil.org/linguistics/wordlists/english/wordlist/wordsEn.txt', FILE_IGNORE_NEW_LINES);
        foreach ($word_list as $cur_word)
        {
            $eng_trie->add_word($cur_word);
        }
    }

}

// A trie that uses nodes containing a letter and pointers to efficiently store words
class trie
{

    // Properties
    public $root;

    // Constructor
    function trie()
    {
        $this->root = new trie_node(' ');
    }

    // Methods
    // Adds a word to the trie
    public function add_word($word)
    {
        // Make the word string into an array for easier processing
        $word = str_split($word);

        // Start at the root node
        $cur_node = & $this->root;

        // Loop through the word
        foreach ($word as $cur_letter)
        {
            // Advance the current node if possible
            if (isset($cur_node->pointers[$cur_letter]))
            {
                $cur_node = & $cur_node->pointers[$cur_letter];
            }

            // Otherwise, add a new node and update the current node
            else
            {
                $cur_node->pointers[$cur_letter] = new trie_node($cur_letter);
                $cur_node = & $cur_node->pointers[$cur_letter];
            }
        }
    }

    // Returns true if the given word exists in the trie, false otherwise
    function check_word($word)
    {
        // Start at the root node
        $cur_node = & $this->root;

        // Loop through the word
        while (strlen($word) >= 0)
        {

            // Return success if the word has no letters left
            if (strlen($word) == 0)
            {
                return true;
            }

            // Extract the first letter
            $cur_letter = $word[0];

            // Advance the current node if possible
            if (isset($cur_node->pointers[$cur_letter]))
            {
                $cur_node = & $cur_node->pointers[$cur_letter];

                // Update the word (remove the first letter)
                $word = substr($word, 1);
            } else
            {
                return false;
            }
        }
    }

}

// The node class used by the above trie class.
class trie_node
{

    // Properties
    public $letter;
    public $pointers = array();

    // Constructor
    function trie_node($init_letter)
    {
        $this->letter = $init_letter;
    }

}